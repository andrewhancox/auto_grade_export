!html
  head
    title"Philip's Answers"
    css ```
body {
  font-family: Verdana;
  color: #333;
}
h1 {
  font-size: 23px;
  padding: 15px 15px;
  border-bottom: solid 1px #eee;
}
ol > li {
  margin-bottom: 30px;
}
ol > li:after {
  content: "\2619";
  font-size: 30px;
  margin-left: 45%;
  margin-top: 5px;
}
.content {
  width: 950px;
  padding: 0px 10px;
  margin: auto auto;
  border-radius: 10px 10px;
  border: solid 1px #eee;
}
.footer {
  font-size: 12px;
  color: #555;
  border-top: solid 1px #eee;
  padding: 5px 15px;
}
a {
  text-decoration: none;
  color: #000;
}
a:hover {
  text-decoration: underline;
}
        ``` is unescaped
  body
    >.content
      md ~~~
# Philip Cali's Answers

1. __List the programming languages with which you have proficiency and
professional experience, along with how much experience you have.__

    - PHP (5 years professionally); I am very proficient in PHP
    - SQL (5 years professionally); I am very proficient in SQL (especially MySQL)
    - Scala (4 years hobby); When I am not working with PHP, I am working in Scala
    - Java (2 years professionally); I know the JVM and it's libraries really well.
    - Javascript (5 years professionally); including jQuery, coffescript, etc
    - HTML (5 years professionally); I know a good amount of HTML5 as well
    - Python (1 year of experience); a lot of a quick scripts and side projects
    - LMXML (I am the creator of this one); I use it all of the time :)

    I practiced a good deal with Erlang and Haskell, but I don't have a year of
    experience in either.

2. __What design patterns have you found yourself using in a professional
capacity? Can you provide use-cases for why these patterns helped you write
maintainable, testable code?__

    In PHP, I've grown fond of the proxy pattern. With Scala, I make heavy use
    of the Cake pattern for dependency injection. Due to the nature of our
    production environment, I have not been able to make use of PHP traits, but I
    would love to! I use Factory method pattern and Publish/Subscribe pattern.

    I use a number of other object oriented design patterns on a daily basis.

    - Proxy pattern: I used this when writing a data querying DSL for SQL statements.
    It used PHP's magic methods to call an underlying object's method to build the
    SQL.
    - Cake pattern: Like the name suggests, it's a way of layering an object to add
    compile time dependencies in either a test or production environment. I used
    this in a monitoring application where different layers could be _what_ to
    monitor and _how_ to monitor it. The Cake part allowed unit testing either of
    these without the need to override protected methods or reflecting on private
    methods.
    - Factory method: An abstract factory to create custom objects. An easy
    extensible point in most applications
    - Publish / subscribe: I make heavy use of this pattern through out. It's a way
    two separate applications can communicate without having to directly rely on
    one another. An example would be an application that produces reports from
    subscribing to a number of published events by another application.

3. __Describe your approach to unit testing. When can unit-testing fail? What are
some additional benefits to unit testing, outside of the tests themselves?__

    I view unit tests as an automated test of a unit of work.
    This can ensure the developer that a testable unit of code will work the same
    in a production environment (with expected input). It will make sure that any
    code changes will not break other parts of the codebase if run in an automated
    fashion (integration testing).

    If not given all of the requirements to the program at hand, unit testing may not
    cover all of the _real-world_ scenario's, and ultimately fail. That said, unit
    tests only ensure that tested code paths are valid (so untested edge case will
    fail, obviously). This births the idea of TDD (test driven developement) or
    BDD (behavior driven development). I prefer BDD. The BDD approach writes unit
    tests to be more like _specifications_, and the implementing code has to pass
    the specification tests, or behaviors.

    The idea is _code-coverage_, or making sure all or most of the code path is
    tested.

    Unit-tests are an important part of any developer's work, and I have a personal
    belief that all applications should have their behaviors tested.

4. __Name the top 3 data structures you find yourself using for storage and
manipulation of in-memory data. If you can, provide average and worst-case
execution time for element add/remove/access/search.__

    My computer science is a bit rusty regarding the O(n) execution speed, but I
    can do some estimation.

    - Linear sequences / arrays: Too often do you find yourself dealing with lists
    of data. Linear sequences like linked lists, can be manipulated by traversing
    the collection pointer across allocated elements when performing insertion and removal.
    Addition can be quick if prepending (a common idiom for recursive rebuilding of a list).
    A worst case scenario for insertion and removal would be O(n): the whole list.
    - Maps / dictionaries / associative arrays: These types of data structures
    allow for quicker direct access depending on the implementation of the
    key / value store. Worst case for search would be O(n^2) (key list, value
    list). Manipulation should be really quick, regardless of implementation.
    - Trees/ graphs: these recursive data structures may be infinite, traversed by
    recursion. A B-tree is pretty quick for searching and manipulation.

5. __List the top 3 things you like best about your primary development language.
Likewise, provide your top 3 most hated aspects of that language.__

    I'm going to use PHP:

    __Love__:

    - Closures: anonymised functions with closures are wonderful
    - Magic methods (with care): responsible dynamics yield a rewarding syntax
    - Dynamic requires (like module loading in Erlang)

    __Hate__:

    - Inconsistencies in function names and parameter sequences
    - No inner classes, interfaces, traits, etc (why?)
    - Manual function composition, currying, and partial application (see my php-optional package)

6. __Provide techniques and/or experience you have in order to scale applications
for rapidly increasing:__

    - __read-performance requirements:__
        - memcache or redis cache for page loads
        - web service API's bottleneck is the network, so put pressure on the host
          DB, and send more data on the network instead of making more
          requests from the clients (for a single, large job; ie: entire campus enrollment)
        - regarding DB querying: join on indexes and keys, only use LEFT OUTER joins
          when absolutely necessary (if nullable data is a requirement); Sometimes
          breaking up a large query into multiple ones will put less pressure on the DB
        - in PHP, try caching results in-memory if they are used multiple times
          instead of iterating over collections every time.
        - When dealing with massive files, it's best to stream the result and work
          with logical bytes instead of reading the entire file into memory.
    - __write-performance requirements:__
        - MySQL (INNODB tables)
        - batch update / insert SQL transactions instead of thousands of INSERT and
          DELETE on single transactions
    - __computational requirements:__
        - cache heavily computational results that will be used frequently (like the
          mean of an overall grade when computing the median, standard deviation, etc)
        - if a request performs heavy lifting, make the job an AJAX RPC for immediate
          client side feedback (provided appropriate client side measures were taken
          to ensure the best possible user experience; what if the request fails? JS
          is disabled?, etc)

7. __Please detail your experience working with and/or implementing distributed
computing environments, where application logic, storage, manipulation,
scheduling, etc. is not isolated to a single machine. What particular challenges
and/or opportunities has these types of environments provided you?__

    A typical production Moodle environment ran on clusters of machines that were
    structured like so:

    - application servers: typical linux boxes probably using ext4 fs; all replicated
    - file servers: these machine stored sticky sessions, user files, temporary
    files relevant to the application, and Smarty template caches; these machines
    ran on a slow storage
    - DB servers: everything MySQL

    I've witnessed situations where the sticky sessions weren't being properly
    replicated causing all sorts of fun login problems.

    We use Smarty 3 for some of our templating, and the cache being on slow storage
    is apparently a big no-no. When reading from a cached template on slow storage,
    it looked like it would cause the PHP output buffer to crash and render a page
    with zero data. That was a fun discovery :) The simple solution was to make the
    cache configurable and place the cache on the application servers instead.

    I've also witnessed a DB cluster go down, and the worst thing that would
    happen were DB connectivity issues from the application servers (bad, but
    could be worse)

    To make up for inconsistent git pull updates and overlapping cron jobs, our
    enrollment system that fires off a long running process has the smarts to
    detect that it's still running, and notify the appropriate people when timing is
    off.

8. __Do you have experience working with HTTP-based APIs? Both application-internal
and public, Internet facing APIs are OK. If so, what did you use them for? Have you
implemented such an API? If so, please explain.__

    I have experience implementing and consuming HTTP-based APIs.

    - I have written a RESTful web service to pull on demand enrollment data; This
      service was written in Java, using Jersey and Spring. The url would something
      like https://web.lsu.edu/2012/Summer/BIOL/1001/001
    - I have written an API to consume a RESTful web service and decode json data;
      this json data is later used to make an additional GET to pull
      profile pictures from our in-house Tiger Card office.
    - I have written an API to consume a SOAP web service and parse XML (see UES);
      this was used to query user information on the LSU campus, and load it
      automatically into Moodle.
    - I have written personal applications which use gdata

9. __What is your preferred development environment? What operating system do you
develop on/for? What editor/IDE do you use? Why do you use this set of tools?__

    - moshed into a ssh / screen session on a Linux environment running bash
    - Ubuntu latest stable
    - the one true editor "vim" :)
    - I've yet to see an environment that compares in portability, speed,
      efficiency. With mosh, I can stay connected to my ssh connection, even if I
      close my laptop, or change hotspots. With screen, it's possible to work in
      nested screens and keep work persisted in separate sessions. With the vast programs
      available (grep, find, awk, sed, watch) in Linux, it's possible to be more efficient
      than using a windowed environment. I could write a novel on vim, and why I
      think it's incredible.

10. __Please list your top 5 favorite "geek" web sites.__

    - [Github](https://github.com)
    - [Hacker News](http://news.ycombinator.com)
    - [Daily JS](http://dailyjs.com)
    - [Twentysided](http://www.shamusyoung.com/twentysidedtale)
    - [xkcd](http://xkcd.com)

11. __What is the approximate ratio of PHP to HTML/CSS code in your applications
or projects?__

    97% PHP / 3% other

12. __Do you include PHP logic in your HTML or view templates? If so, explain how
and why.__

    Never when using Smarty, sometimes when using Moodle output components.
    In Moodle, output components are pluggable pieces of PHP code that write HTML
    using their API. The idea behind it, is to give theme designers direct access
    to an output component, without having to modify a plugin's output directly.
    An output component can be anything as small as a heading tag, a dropdown,
    or a customized graph.

    It's accurate to say: I never write HTML directly unless I'm
    using the Smarty template. Otherwise, output is composed pieces of output
    component render calls.

    One thing you never see in my code: closing the PHP tag to do HTML output.

13. __Do you have experience with Zend, Cake, or equivalent PHP application
frameworks? If you are not using a framework, what have you done to effect
orderly, maintainable PHP application development?__

    I have 5 years of Moodle framework experience, and 1 year of Wordpress
    development. Both of these frameworks prefer a modular design, meaning
    extending a system is plugin based. I've toyed with Cake years ago when it was
    one of the more popular MVC frameworks.
      ~~~
      footer.footer
        md ~~~
Content by Philip Cali. Generated with [LMXML][lmxml] (v{lmxml-version}).

[lmxml]: https://github.com/philcali/lmxml/tree/master/app#readme
           ~~~
